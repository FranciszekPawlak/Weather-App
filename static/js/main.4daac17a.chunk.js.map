{"version":3,"sources":["components/Highchart.js","components/Weather.js","App.js","index.js"],"names":["days","Highchart","props","day","Date","getDay","fullDate","toLocaleDateString","counter","hoursWithDays","Object","toConsumableArray","data","hoursHighchart","map","item","substring","HighchartOptions","title","text","concat","city","subtitle","xAxis","categories","yAxis","series","name","tempHighchart","react_default","a","createElement","highcharts_react_min_default","highcharts","Highcharts","options","Weather","country","className","icon","temp","wind","humidity","pressure","sunrise","sunset","APIkey","App","state","value","dataHighchart","dataWeather","dataHighchartIsLoad","dataWeatherIsLoad","handleCahngeInput","e","_this","setState","target","_this2","this","date","toISOString","slice","highchartAPI","weatherAPI","fetch","then","resp","ok","json","Error","main","speed","sys","toLocaleTimeString","weather","id","catch","err","console","log","list","index","dt_txt","prevProps","prevState","_this3","length","Fragment","type","onChange","components_Weather","components_Highchart","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"6SAGMA,EAAO,CACX,SACA,SACA,UACA,YACA,WACA,SACA,YA2DaC,EAzDG,SAAAC,GAChB,IAAMC,GAAM,IAAIC,MAAOC,SACjBC,GAAW,IAAIF,MAAOG,qBACxBC,EAAUL,EAERM,EAAgBC,OAAAC,EAAA,EAAAD,CAAIR,EAAMU,KAAKC,eAAe,IAAIC,IAAI,SAAAC,GAmB1D,MAlBa,UAATA,IACEP,EAAU,GACZO,EAAOf,EAAKQ,EAAU,GAAGQ,UAAU,EAAG,GAAK,IAAMD,EACjDP,GAAW,GACU,IAAZA,GACTO,EAAOf,EAAK,GAAGgB,UAAU,EAAG,GAAK,IAAMD,EACvCP,GAAW,GACU,IAAZA,GACTO,EAAOf,EAAK,GAAGgB,UAAU,EAAG,GAAK,IAAMD,EACvCP,GAAW,GACU,IAAZA,GACTO,EAAOf,EAAK,GAAGgB,UAAU,EAAG,GAAK,IAAMD,EACvCP,GAAW,GACU,IAAZA,IACTO,EAAOf,EAAK,GAAGgB,UAAU,EAAG,GAAK,IAAMD,EACvCP,EAAU,IAGPO,IAEHE,EAAmB,CACvBC,MAAO,CACLC,KAAI,iCAAAC,OAAmClB,EAAMmB,OAG/CC,SAAU,CACRH,KAAI,QAAAC,OAAUpB,EAAKG,EAAM,GAArB,MAAAiB,OAA4Bd,IAElCiB,MAAO,CACLC,WAAYf,GAEdgB,MAAO,CACLP,MAAO,CACLC,KAAM,wBAGVO,OAAQ,CACN,CACEC,KAAM,cACNf,KAAMV,EAAMU,KAAKgB,cAAc,MAKrC,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAiBG,WAAYC,IAAYC,QAASlB,MC9CzCmB,EAjBC,SAAAlC,GACd,OACE2B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,wBACc7B,EAAMmB,KADpB,IAC2BnB,EAAMU,KAAKyB,SAEtCR,EAAAC,EAAAC,cAAA,KAAGO,UAAS,aAAAlB,OAAelB,EAAMU,KAAK2B,QACtCV,EAAAC,EAAAC,cAAA,0BAAkB7B,EAAMU,KAAK4B,KAA7B,WACAX,EAAAC,EAAAC,cAAA,oBAAY7B,EAAMU,KAAK6B,KAAvB,QACAZ,EAAAC,EAAAC,cAAA,mCAAiB7B,EAAMU,KAAK8B,SAA5B,MACAb,EAAAC,EAAAC,cAAA,6BAAgB7B,EAAMU,KAAK+B,SAA3B,QACAd,EAAAC,EAAAC,cAAA,yCAAoB7B,EAAMU,KAAKgC,SAC/Bf,EAAAC,EAAAC,cAAA,yCAAoB7B,EAAMU,KAAKiC,UCT/BC,EAAS,mCAmKAC,6MAhKbC,MAAQ,CACNC,MAAO,SACPC,cAAe,CACbrC,eAAgB,GAChBe,cAAe,IAEjBuB,YAAa,CACXX,KAAM,GACNC,KAAM,GACNC,SAAU,GACVC,SAAU,GACVC,QAAS,GACTC,OAAQ,GACRN,KAAM,GACNF,QAAS,IAGXe,qBAAqB,EACrBC,mBAAmB,KAGrBC,kBAAoB,SAAAC,GAAC,OAAIC,EAAKC,SAAS,CAAER,MAAOM,EAAEG,OAAOT,4FACrC,IAAAU,EAAAC,KACZC,GAAO,IAAIzD,MAAO0D,cACxBF,KAAKH,SAAS,CAAEI,KAAMA,EAAKE,MAAM,EAAG,IAAM,MAAQF,EAAKE,MAAM,GAAI,MACjE,IAAMC,EAAY,sDAAA5C,OAChBwC,KAAKZ,MAAMC,MADK,WAAA7B,OAER0B,EAFQ,iBAGZmB,EAAU,qDAAA7C,OACdwC,KAAKZ,MAAMC,MADG,WAAA7B,OAEN0B,EAFM,iBAKhBoB,MAAMD,GACHE,KAAK,SAAAC,GACJ,GAAIA,EAAKC,GACP,OAAOD,EAAKE,OAEd,MAAMC,MAAM,yBAEbJ,KAAK,SAAAvD,GAAI,OACR+C,EAAKF,SAAS,CACZN,YAAa,CACXX,KAAM5B,EAAK4D,KAAKhC,KAChBC,KAAM7B,EAAK6B,KAAKgC,MAChB/B,SAAU9B,EAAK4D,KAAK9B,SACpBC,SAAU/B,EAAK4D,KAAK7B,SACpBC,QAAS,IAAIxC,KAAwB,IAAnBQ,EAAK8D,IAAI9B,SAAgB+B,qBAC3C9B,OAAQ,IAAIzC,KAAuB,IAAlBQ,EAAK8D,IAAI7B,QAAe8B,qBACzCpC,KAAM3B,EAAKgE,QAAQ,GAAGC,GACtBxC,QAASzB,EAAK8D,IAAIrC,SAEpBgB,mBAAmB,MAGtByB,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,KAE5Bb,MAAMF,GACHG,KAAK,SAAAC,GACJ,GAAIA,EAAKC,GACP,OAAOD,EAAKE,OAEd,MAAMC,MAAM,yBAEbJ,KAAK,SAAAvD,GAAI,OACR+C,EAAKF,SAAS,CACZP,cAAe,CACbrC,eAAgB,CACdD,EAAKsE,KAAKpE,IAAI,SAAC+C,EAAMsB,GAAP,OAAiBtB,EAAKuB,OAAOrB,MAAM,GAAI,OAEvDnC,cAAe,CAAChB,EAAKsE,KAAKpE,IAAI,SAAAC,GAAI,OAAIA,EAAKyD,KAAKhC,SAElDY,qBAAqB,MAGxB0B,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,gDAEXM,EAAWC,GAAW,IAAAC,EAAA3B,KACvC,GAAgC,IAA5BA,KAAKZ,MAAMC,MAAMuC,QACjBF,EAAUrC,QAAUW,KAAKZ,MAAMC,OAASW,KAAKZ,MAAMC,MAAMuC,OAAS,EAAG,CACvE,IAAMxB,EAAY,sDAAA5C,OAChBwC,KAAKZ,MAAMC,MADK,WAAA7B,OAER0B,EAFQ,iBAGZmB,EAAU,qDAAA7C,OACdwC,KAAKZ,MAAMC,MADG,WAAA7B,OAEN0B,EAFM,iBAGhBoB,MAAMD,GACHE,KAAK,SAAAC,GACJ,GAAIA,EAAKC,GACP,OAAOD,EAAKE,OAId,MAAMC,MAAM,yBAEbJ,KAAK,SAAAvD,GAAI,OACR2E,EAAK9B,SAAS,CACZN,YAAa,CACXX,KAAM5B,EAAK4D,KAAKhC,KAChBC,KAAM7B,EAAK6B,KAAKgC,MAChB/B,SAAU9B,EAAK4D,KAAK9B,SACpBC,SAAU/B,EAAK4D,KAAK7B,SACpBC,QAAS,IAAIxC,KAAwB,IAAnBQ,EAAK8D,IAAI9B,SAAgB+B,qBAC3C9B,OAAQ,IAAIzC,KAAuB,IAAlBQ,EAAK8D,IAAI7B,QAAe8B,qBACzCpC,KAAM3B,EAAKgE,QAAQ,GAAGC,GACtBxC,QAASzB,EAAK8D,IAAIrC,SAEpBgB,mBAAmB,MAGtByB,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,KAC5Bb,MAAMF,GACHG,KAAK,SAAAC,GACJ,GAAIA,EAAKC,GACP,OAAOD,EAAKE,OAId,MAAMC,MAAM,yBAEbJ,KAAK,SAAAvD,GAAI,OACR2E,EAAK9B,SAAS,CACZP,cAAe,CACbrC,eAAgB,CACdD,EAAKsE,KAAKpE,IAAI,SAAC+C,EAAMsB,GAAP,OAAiBtB,EAAKuB,OAAOrB,MAAM,GAAI,OAEvDnC,cAAe,CAAChB,EAAKsE,KAAKpE,IAAI,SAAAC,GAAI,OAAIA,EAAKyD,KAAKhC,SAElDY,qBAAqB,MAGxB0B,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,uCAK9B,OACElD,EAAAC,EAAAC,cAAAF,EAAAC,EAAA2D,SAAA,KACE5D,EAAAC,EAAAC,cAAA,OAAKO,UAAU,OACbT,EAAAC,EAAAC,cAAA,SACE2D,KAAK,OACLzC,MAAOW,KAAKZ,MAAMC,MAClB0C,SAAU/B,KAAKN,oBAEjBzB,EAAAC,EAAAC,cAAA,WACC6B,KAAKZ,MAAMK,kBACVxB,EAAAC,EAAAC,cAAC6D,EAAD,CAAShF,KAAMgD,KAAKZ,MAAMG,YAAa9B,KAAMuC,KAAKZ,MAAMC,QACtD,KACHW,KAAKZ,MAAMI,oBACVvB,EAAAC,EAAAC,cAAC8D,EAAD,CACEjF,KAAMgD,KAAKZ,MAAME,cACjB7B,KAAMuC,KAAKZ,MAAMC,QAEjB,cA1JI6C,aCAlBC,IAASC,OAAOnE,EAAAC,EAAAC,cAACkE,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.4daac17a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Highcharts from \"highcharts/highstock\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\nconst days = [\r\n  \"Sunday\",\r\n  \"Monday\",\r\n  \"Tuesday\",\r\n  \"Wednesday\",\r\n  \"Thursday\",\r\n  \"Friday\",\r\n  \"Saturday\"\r\n];\r\nconst Highchart = props => {\r\n  const day = new Date().getDay();\r\n  const fullDate = new Date().toLocaleDateString();\r\n  let counter = day;\r\n\r\n  const hoursWithDays = [...props.data.hoursHighchart[0]].map(item => {\r\n    if (item === \"00:00\") {\r\n      if (counter < 3) {\r\n        item = days[counter + 1].substring(0, 3) + \" \" + item;\r\n        counter += 1;\r\n      } else if (counter === 3) {\r\n        item = days[4].substring(0, 3) + \" \" + item;\r\n        counter += 1;\r\n      } else if (counter === 4) {\r\n        item = days[5].substring(0, 3) + \" \" + item;\r\n        counter += 1;\r\n      } else if (counter === 5) {\r\n        item = days[6].substring(0, 3) + \" \" + item;\r\n        counter += 1;\r\n      } else if (counter === 6) {\r\n        item = days[0].substring(0, 3) + \" \" + item;\r\n        counter = 0;\r\n      }\r\n    }\r\n    return item;\r\n  });\r\n  const HighchartOptions = {\r\n    title: {\r\n      text: `Five-day weather forecast for ${props.city}`\r\n    },\r\n\r\n    subtitle: {\r\n      text: `from ${days[day - 1]}  ${fullDate}`\r\n    },\r\n    xAxis: {\r\n      categories: hoursWithDays\r\n    },\r\n    yAxis: {\r\n      title: {\r\n        text: \"Temperature (°C)\"\r\n      }\r\n    },\r\n    series: [\r\n      {\r\n        name: \"temperature\",\r\n        data: props.data.tempHighchart[0]\r\n      }\r\n    ]\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <HighchartsReact highcharts={Highcharts} options={HighchartOptions} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Highchart;\r\n","import React from \"react\";\r\nconst Weather = props => {\r\n  return (\r\n    <div>\r\n      <h4>\r\n        Weather in {props.city} {props.data.country}\r\n      </h4>\r\n      <i className={`wi wi-owm-${props.data.icon}`} />\r\n      <h4>Temperatura: {props.data.temp} &#8451;</h4>\r\n      <h4>Wiatr: {props.data.wind} m/s</h4>\r\n      <h4>Wilgotność: {props.data.humidity} %</h4>\r\n      <h4>Ciśnienie: {props.data.pressure} hPa</h4>\r\n      <h4>Wschód słońca: {props.data.sunrise}</h4>\r\n      <h4>Zachód słońca: {props.data.sunset}</h4>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Weather;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Highchart from \"./components/Highchart\";\nimport Weather from \"./components/Weather\";\nconst APIkey = \"1697193f8750f5ec8d1046c2118876cf\";\n\nclass App extends Component {\n  state = {\n    value: \"Warsaw\",\n    dataHighchart: {\n      hoursHighchart: [],\n      tempHighchart: []\n    },\n    dataWeather: {\n      temp: \"\",\n      wind: \"\",\n      humidity: \"\",\n      pressure: \"\",\n      sunrise: \"\",\n      sunset: \"\",\n      icon: \"\",\n      country: \"\"\n    },\n\n    dataHighchartIsLoad: false,\n    dataWeatherIsLoad: false\n  };\n\n  handleCahngeInput = e => this.setState({ value: e.target.value });\n  componentDidMount() {\n    const date = new Date().toISOString();\n    this.setState({ date: date.slice(0, 23) + \"000\" + date.slice(23, 24) });\n    const highchartAPI = `https://api.openweathermap.org/data/2.5/forecast?q=${\n      this.state.value\n    }&appid=${APIkey}&units=metric`;\n    const weatherAPI = `https://api.openweathermap.org/data/2.5/weather?q=${\n      this.state.value\n    }&appid=${APIkey}&units=metric`;\n\n    //pogoda--------------------------------------\n    fetch(weatherAPI)\n      .then(resp => {\n        if (resp.ok) {\n          return resp.json();\n        }\n        throw Error(\"Brak miasta w bazie\");\n      })\n      .then(data =>\n        this.setState({\n          dataWeather: {\n            temp: data.main.temp,\n            wind: data.wind.speed,\n            humidity: data.main.humidity,\n            pressure: data.main.pressure,\n            sunrise: new Date(data.sys.sunrise * 1000).toLocaleTimeString(),\n            sunset: new Date(data.sys.sunset * 1000).toLocaleTimeString(),\n            icon: data.weather[0].id,\n            country: data.sys.country\n          },\n          dataWeatherIsLoad: true\n        })\n      )\n      .catch(err => console.log(err));\n    //wykres-----------------------\n    fetch(highchartAPI)\n      .then(resp => {\n        if (resp.ok) {\n          return resp.json();\n        }\n        throw Error(\"Brak miasta w bazie\");\n      })\n      .then(data =>\n        this.setState({\n          dataHighchart: {\n            hoursHighchart: [\n              data.list.map((date, index) => date.dt_txt.slice(11, 16))\n            ],\n            tempHighchart: [data.list.map(item => item.main.temp)]\n          },\n          dataHighchartIsLoad: true\n        })\n      )\n      .catch(err => console.log(err));\n  }\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.value.length === 0) return;\n    if (prevState.value !== this.state.value && this.state.value.length > 2) {\n      const highchartAPI = `https://api.openweathermap.org/data/2.5/forecast?q=${\n        this.state.value\n      }&appid=${APIkey}&units=metric`;\n      const weatherAPI = `https://api.openweathermap.org/data/2.5/weather?q=${\n        this.state.value\n      }&appid=${APIkey}&units=metric`;\n      fetch(weatherAPI)\n        .then(resp => {\n          if (resp.ok) {\n            return resp.json();\n          } /*else {\n            this.setState({ dataWeather: [], dataWeatherIsLoad: false });\n          }*/\n          throw Error(\"Brak miasta w bazie\");\n        })\n        .then(data =>\n          this.setState({\n            dataWeather: {\n              temp: data.main.temp,\n              wind: data.wind.speed,\n              humidity: data.main.humidity,\n              pressure: data.main.pressure,\n              sunrise: new Date(data.sys.sunrise * 1000).toLocaleTimeString(),\n              sunset: new Date(data.sys.sunset * 1000).toLocaleTimeString(),\n              icon: data.weather[0].id,\n              country: data.sys.country\n            },\n            dataWeatherIsLoad: true\n          })\n        )\n        .catch(err => console.log(err));\n      fetch(highchartAPI)\n        .then(resp => {\n          if (resp.ok) {\n            return resp.json();\n          } /*else {\n            this.setState({ dataHighchart: [], dataHighchartIsLoad: false });\n          }*/\n          throw Error(\"Brak miasta w bazie\");\n        })\n        .then(data =>\n          this.setState({\n            dataHighchart: {\n              hoursHighchart: [\n                data.list.map((date, index) => date.dt_txt.slice(11, 16))\n              ],\n              tempHighchart: [data.list.map(item => item.main.temp)]\n            },\n            dataHighchartIsLoad: true\n          })\n        )\n        .catch(err => console.log(err));\n    }\n  }\n\n  render() {\n    return (\n      <>\n        <div className=\"App\">\n          <input\n            type=\"text\"\n            value={this.state.value}\n            onChange={this.handleCahngeInput}\n          />\n          <br />\n          {this.state.dataWeatherIsLoad ? (\n            <Weather data={this.state.dataWeather} city={this.state.value} />\n          ) : null}\n          {this.state.dataHighchartIsLoad ? (\n            <Highchart\n              data={this.state.dataHighchart}\n              city={this.state.value}\n            />\n          ) : null}\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}