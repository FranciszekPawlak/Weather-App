{"version":3,"sources":["components/Highchart.js","components/Weather.js","App.js","index.js"],"names":["days","Highchart","props","console","log","data","day","Date","getDay","fullDate","toLocaleDateString","counter","hoursWithDays","Object","toConsumableArray","hoursHighchart","map","item","substring","HighchartOptions","title","text","concat","city","subtitle","xAxis","categories","yAxis","series","name","tempHighchart","react_default","a","createElement","className","highcharts_react_min_default","highcharts","Highcharts","options","Weather","country","toLocaleString","icon","temp","wind","humidity","pressure","sunrise","sunset","APIkey","App","state","value","dataHighchart","dataWeather","dataHighchartIsLoad","dataWeatherIsLoad","handleCahngeInput","e","_this","setState","target","_this2","this","highchartAPI","weatherAPI","fetch","then","resp","ok","json","Error","main","speed","sys","toLocaleTimeString","weather","id","catch","err","list","date","index","dt_txt","slice","prevProps","prevState","_this3","length","Fragment","type","placeholder","onChange","components_Weather","components_Highchart","Component","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.c650365c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Highcharts from \"highcharts/highstock\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\nimport \"../styles/Highchart.css\";\r\nconst days = [\r\n  \"Sunday\",\r\n  \"Monday\",\r\n  \"Tuesday\",\r\n  \"Wednesday\",\r\n  \"Thursday\",\r\n  \"Friday\",\r\n  \"Saturday\"\r\n];\r\nconst Highchart = props => {\r\n  console.log(props.data);\r\n  const day = new Date().getDay();\r\n  const fullDate = new Date().toLocaleDateString();\r\n  let counter = day;\r\n\r\n  const hoursWithDays = [...props.data.hoursHighchart[0]].map(item => {\r\n    if (item === \"00:00\") {\r\n      if (counter < 3) {\r\n        item = days[counter + 1].substring(0, 3) + \" \" + item;\r\n        counter += 1;\r\n      } else if (counter === 3) {\r\n        item = days[4].substring(0, 3) + \" \" + item;\r\n        counter += 1;\r\n      } else if (counter === 4) {\r\n        item = days[5].substring(0, 3) + \" \" + item;\r\n        counter += 1;\r\n      } else if (counter === 5) {\r\n        item = days[6].substring(0, 3) + \" \" + item;\r\n        counter += 1;\r\n      } else if (counter === 6) {\r\n        item = days[0].substring(0, 3) + \" \" + item;\r\n        counter = 0;\r\n      }\r\n    }\r\n    return item;\r\n  });\r\n  const HighchartOptions = {\r\n    title: {\r\n      text: `Five-day weather forecast for ${props.city}`\r\n    },\r\n\r\n    subtitle: {\r\n      text: `from ${days[day - 1]}  ${fullDate}`\r\n    },\r\n    xAxis: {\r\n      categories: hoursWithDays\r\n    },\r\n    yAxis: {\r\n      title: {\r\n        text: \"Temperature (Â°C)\"\r\n      }\r\n    },\r\n    series: [\r\n      {\r\n        name: \"temperature\",\r\n        data: props.data.tempHighchart[0]\r\n      }\r\n    ]\r\n  };\r\n\r\n  return (\r\n    <div className=\"highchart\">\r\n      <HighchartsReact highcharts={Highcharts} options={HighchartOptions} />\r\n      <p>highchart generate by www.highcharts.com</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Highchart;\r\n","import React from \"react\";\r\nimport \"../styles/Weather.css\";\r\nconst Weather = props => {\r\n  return (\r\n    <div className=\"weather\">\r\n      <h1>\r\n        Weather in\r\n        <span> {props.city}</span> {props.data.country}\r\n      </h1>\r\n      <p>{new Date().toLocaleString()}</p>\r\n      <i className={`wi wi-owm-${props.data.icon} icon`} />\r\n      <div className=\"values\">\r\n        <h2>\r\n          <i className=\"fas fa-thermometer-half\" /> {props.data.temp} &#8451;\r\n        </h2>\r\n        <h2>\r\n          <i className=\"fas fa-wind\" /> {props.data.wind} m/s\r\n        </h2>\r\n        <h2>\r\n          <i className=\"fas fa-tint\" /> {props.data.humidity} %\r\n        </h2>\r\n        <h2>\r\n          <i className=\"fab fa-cloudscale\" /> {props.data.pressure} hPa\r\n        </h2>\r\n        <h2>\r\n          <i className=\"fas fa-sun\" /> {props.data.sunrise}\r\n        </h2>\r\n        <h2>\r\n          <i className=\"fas fa-moon\" /> {props.data.sunset}\r\n        </h2>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Weather;\r\n","import React, { Component } from \"react\";\nimport \"./styles/App.css\";\nimport Highchart from \"./components/Highchart\";\nimport Weather from \"./components/Weather\";\nconst APIkey = \"1697193f8750f5ec8d1046c2118876cf\";\n\nclass App extends Component {\n  state = {\n    value: \"\",\n    city: \"\",\n    dataHighchart: {\n      hoursHighchart: [],\n      tempHighchart: []\n    },\n    dataWeather: {\n      temp: \"\",\n      wind: \"\",\n      humidity: \"\",\n      pressure: \"\",\n      sunrise: \"\",\n      sunset: \"\",\n      icon: \"\",\n      country: \"\"\n    },\n\n    dataHighchartIsLoad: false,\n    dataWeatherIsLoad: false\n  };\n\n  handleCahngeInput = e => this.setState({ value: e.target.value });\n  componentDidMount() {\n    const highchartAPI = `https://api.openweathermap.org/data/2.5/forecast?q=warsaw&appid=${APIkey}&units=metric`;\n    const weatherAPI = `https://api.openweathermap.org/data/2.5/weather?q=warsaw&appid=${APIkey}&units=metric`;\n\n    //pogoda--------------------------------------\n    fetch(weatherAPI)\n      .then(resp => {\n        if (resp.ok) {\n          return resp.json();\n        }\n        throw Error(\"Brak miasta w bazie\");\n      })\n      .then(data => {\n        this.setState({\n          dataWeather: {\n            temp: data.main.temp,\n            wind: data.wind.speed,\n            humidity: data.main.humidity,\n            pressure: data.main.pressure,\n            sunrise: new Date(data.sys.sunrise * 1000).toLocaleTimeString(),\n            sunset: new Date(data.sys.sunset * 1000).toLocaleTimeString(),\n            icon: data.weather[0].id,\n            country: data.sys.country\n          },\n          city: data.name,\n          dataWeatherIsLoad: true\n        });\n      })\n      .catch(err => console.log(err));\n    //wykres-----------------------\n    fetch(highchartAPI)\n      .then(resp => {\n        if (resp.ok) {\n          return resp.json();\n        }\n        throw Error(\"cannot read data\");\n      })\n      .then(data =>\n        this.setState({\n          dataHighchart: {\n            hoursHighchart: [\n              data.list.map((date, index) => date.dt_txt.slice(11, 16))\n            ],\n            tempHighchart: [data.list.map(item => item.main.temp)]\n          },\n          dataHighchartIsLoad: true\n        })\n      )\n      .catch(err => console.log(err));\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.value.length === 0) return;\n\n    if (\n      prevState.value !== this.state.value /* && this.state.value.length > 2*/\n    ) {\n      this.setState({\n        dataWeather: {\n          temp: \"--\",\n          wind: \"--\",\n          humidity: \"--\",\n          pressure: \"--\",\n          sunrise: \"--\",\n          sunset: \"--\",\n          icon: \"--\",\n          country: \"\"\n        },\n        city: \"--\"\n      });\n      const highchartAPI = `https://api.openweathermap.org/data/2.5/forecast?q=${\n        this.state.value\n      }&appid=${APIkey}&units=metric`;\n      const weatherAPI = `https://api.openweathermap.org/data/2.5/weather?q=${\n        this.state.value\n      }&appid=${APIkey}&units=metric`;\n      fetch(weatherAPI)\n        .then(resp => {\n          if (resp.ok) {\n            return resp.json();\n          }\n          throw Error(\"cannot read data\");\n        })\n        .then(data =>\n          this.setState({\n            dataWeather: {\n              temp: data.main.temp,\n              wind: data.wind.speed,\n              humidity: data.main.humidity,\n              pressure: data.main.pressure,\n              sunrise: new Date(data.sys.sunrise * 1000).toLocaleTimeString(),\n              sunset: new Date(data.sys.sunset * 1000).toLocaleTimeString(),\n              icon: data.weather[0].id,\n              country: data.sys.country\n            },\n            city: data.name,\n            dataWeatherIsLoad: true\n          })\n        )\n        .catch(err => console.log(err));\n      //highchart\n      fetch(highchartAPI)\n        .then(resp => {\n          if (resp.ok) {\n            return resp.json();\n          }\n          throw Error(\"cannot read data\");\n        })\n        .then(data =>\n          this.setState({\n            dataHighchart: {\n              hoursHighchart: [\n                data.list.map((date, index) => date.dt_txt.slice(11, 16))\n              ],\n              tempHighchart: [data.list.map(item => item.main.temp)]\n            },\n            dataHighchartIsLoad: true\n          })\n        )\n        .catch(err => console.log(err));\n    }\n  }\n\n  render() {\n    return (\n      <>\n        <div className=\"App\">\n          <div className=\"input\">\n            <input\n              type=\"text\"\n              placeholder=\"find your city!\"\n              value={this.state.value}\n              onChange={this.handleCahngeInput}\n            />\n            <i className=\"fas fa-search\" />\n          </div>\n          {this.state.dataWeatherIsLoad ? (\n            <Weather data={this.state.dataWeather} city={this.state.city} />\n          ) : null}\n          {this.state.dataHighchartIsLoad ? (\n            <Highchart data={this.state.dataHighchart} city={this.state.city} />\n          ) : null}\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}